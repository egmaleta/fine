// PARSER GRAMMAR

module: top_defn*

?top_defn: _LET fixity name _ASSIGN external           -> external_value_defn
         | _LET fixity name params _ASSIGN external    -> external_func_defn
         | _LET fixity ID operator ID _ASSIGN external -> external_op_defn
         | defn

external: _EXTERNAL ID

?defn: _LET fixity name _ASSIGN expr           -> value_defn
     | _LET fixity name params _ASSIGN expr    -> func_defn
     | _LET fixity ID operator ID _ASSIGN expr -> op_defn

fixity: ( ( INFIXL | INFIXR ) NAT )?

params: ID+

name: ID
    | _OPAR ( LARGE_OP | OP ) _CPAR

?expr: _BSLASH params? _ASSIGN expr     -> func_expr
     | _DO actions _THEN expr           -> block_expr
     | defn+ _IN expr                   -> let_expr
     | _MATCH expr _WITH _BAR? matches  -> match_expr
     | _IF expr _THEN expr _ELSE expr   -> cond_expr
     | op_chain

actions: expr ( _SEMI actions )* _SEMI?

matches: pattern _ARROW expr ( _BAR matches )*

?pattern: ID      -> id_pattern
        | TYPE_ID -> ct_pattern
        | literal

op_chain: operand ( operator op_chain )*

operator: _BTICK ID _BTICK
        | LARGE_OP
        | OP

?operand: operand atom -> func_app
        | atom

?atom: _OPAR expr _CPAR   -> expr_atom
     | ( TYPE_ID | name ) -> id_atom
     | literal

?literal: DEC  -> dec_literal
        | NAT  -> nat_literal
        | BOOL -> bool_literal
        | UNIT -> unit_literal

// LEXER GRAMMAR

_EXTERNAL.1: "#external" // over COMMENT
COMMENT: /#[^\n]*/

TYPE_ID: /[A-Z][a-zA-Z0-9_]*/

// keywords (all over ID)
INFIXL.2: "infixl" // over IN
INFIXR.2: "infixr" // over IN
_IN.1: "in"
_LET.1: "let"
_THEN.1: "then"
_DO.1: "do"
_MATCH.1: "match"
_WITH.1: "with"
_IF.1: "if"
_ELSE.1: "else"
BOOL.1: "true" | "false"

ID: /[a-z_][a-zA-Z0-9_]*/

DEC: /(0|[1-9][0-9]*)\.[0-9]*/
NAT: /0|[1-9][0-9]*/

_BTICK: "`"
_BSLASH: "\\"
_SEMI: ";"

_ARROW.1: "->" // over LARGE_OP
LARGE_OP: /[~!@$%^&*\/\-+|?.<>:=]{2,3}/
_ASSIGN: "="
_BAR: "|"
OP: /[~!@$%^&*\/\-+?.<>:]/

UNIT: "()"

_OPAR: "("
_CPAR: ")"

SPACE: /[ \t\f\r\n]+/

%ignore COMMENT
%ignore SPACE
